import { Command, InvalidArgumentError } from "commander";
import { getStatebackedClient, prompt } from "../utils.js";

export function addTokenProviderCommands(cmd: Command) {
  const tokenProviders = cmd
    .command("token-providers")
    .description("Manage token provider configurations for token exchange");

  tokenProviders
    .command("upsert")
    .description("Create or update a token provider configuration")
    .requiredOption(
      "-s, --service <service>",
      "The service name used to identify this token provider. (required)",
    )
    .requiredOption(
      "-m, --mapping <mapping>",
      "JSON object defining the shape of the claims to include in the generated token. The mapping may reference any items extracted by identity providers. The value of any object key that ends in '.$' will be treated as a JSON path expression indexing into the identity provider-extracted claims. So { \"sub.$\" \"$.sub\" } will include sub claim extracted by the identity providers and add a 'sub' claim to the generated State Backed token.",
    )
    .requiredOption(
      "-k, --key <key>",
      "The State Backed key ID to use to sign the tokens generated by this token provider. (required)",
    )
    .action(upsertTokenProvider);

  tokenProviders
    .command("delete")
    .description("Delete a token provider configuration")
    .requiredOption(
      "-s, --service <service>",
      "The service name used to identify this token provider. (required)",
    )
    .action(deleteIdentityProvider);
}

async function upsertTokenProvider(
  opts: {
    service: string;
    mapping: string;
    key: string;
  },
  options: Command,
) {
  const mapping = (() => {
    try {
      return JSON.parse(opts.mapping);
    } catch {
      throw new InvalidArgumentError("--mapping must be a valid JSON object");
    }
  })();

  const s = await getStatebackedClient(options);

  await s.tokenProviders.upsert({
    service: opts.service,
    mapping,
    keyId: opts.key,
  });

  console.log(`Created token provider ${opts.service}`);
}

async function deleteIdentityProvider(
  opts: {
    service: string;
  },
  options: Command,
) {
  const confirmation = await prompt(
    "Re-type the service name to confirm deletion:",
  );
  if (confirmation !== opts.service) {
    console.log("Aborting");
    return;
  }
  const s = await getStatebackedClient(options);

  await s.tokenProviders.delete(opts.service);

  console.log(`Deleted token provider ${opts.service}`);
}
